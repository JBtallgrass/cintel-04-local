[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shiny import render\nfrom shinywidgets import render_plotly\nimport pandas as pd\nimport seaborn as sns\nimport palmerpenguins  # This package provides the Palmer Penguins dataset\nfrom shiny import reactive\n\n# built-in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\n# Page name\nui.page_opts(title=\"JB Penguins Data\", fillable=True)\n\ncolor_map = {\"Adelie\": \"blue\", \"Gentoo\": \"green\", \"Chinstrap\": \"red\"}\n\n\n# sidebar for user interaction\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\")\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Plotly Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n\n    # Create a numeric input for the number of Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\", \"Number of plotly bins\", 30)\n\n    # Creates slider input for Seaborn bins\n    ui.input_slider(\n        \"seaborn_bin_slider\",\n        \"Number of Bins\",\n        1,\n        50,\n        10,\n    )\n\n    # Use ui.input_checkbox_group() to create a checkbox group input to filter the species\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Species in Scatterplot\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\"],\n        inline=True,\n    )\n\n    # Use ui.input_checkbox_group() to create a checkbox group input to filter the islands\n    ui.input_checkbox_group(\n        \"selected_islands\",\n        \"Islands in Graphs\",\n        [\"Torgersen\", \"Biscoe\", \"Dream\"],\n        selected=[\"Torgersen\", \"Biscoe\", \"Dream\"],\n        inline=True,\n    )\n\n# Use ui.hr() to add a horizontal rule to the sidebar\nui.hr()\n\n# Use ui.a() to add a hyperlink to the sidebar\nui.a(\n    \"JBTallgrass GitHub\",\n    href=\"https://github.com/JBtallgrass/cintel-02-data\",\n    target=\"_blank\",\n)\n\n# Data table showing the penguin dataset Include 2 cards with a table and a grid\nwith ui.layout_columns(col_widths=(4, 8)):\n    with ui.card(full_screen=True):  # Full screen option\n        ui.h3(\"Penguins Data Table\")\n\n        @render.data_frame\n        def render_penguins_table():\n            return filtered_data()\n\n    with ui.card(full_screen=True):\n        ui.h3(\"Penguins Data Grid\")\n\n        @render.data_frame\n        def render_penguins_grid():\n            return filtered_data()\n\n\n# Use ui.hr() to add a horizontal rule to the sidebar\nui.hr()\n\n# Creates a Plotly Histogram showing all species\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.h3(\"All Species Histogram-Plotly\")\n\n        @render_plotly\n        def plotly_histogram():\n            return px.histogram(\n                filtered_data(),\n                x=\"species\",\n                color=\"species\",\n                color_discrete_map=color_map,\n            )\n\n    with ui.card(full_screen=True):\n        ui.h3(\"All Species ScatterPlot-plotly\")\n\n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(\n                filtered_data(),\n                title=\"All Species ScatterPlot-plotly\",\n                x=\"body_mass_g\",\n                y=\"bill_length_mm\",\n                color=\"species\",\n                symbol=\"species\",\n                color_discrete_map=color_map,\n            )\n\n    # Creates a Seaborn Histogram showing all species\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Seaborn Histogram\")\n\n        palette = sns.color_palette(\"Set3\")  # Choose a palette with 3 colors\n\n        @render.plot(alt=\"Seaborn Histogram\")\n        def seaborn_histogram():\n            histplot = sns.histplot(\n                filtered_data(),\n                x=\"body_mass_g\",\n                bins=input.seaborn_bin_count(),\n                hue=\"species\",\n                palette=palette,\n            )\n            histplot.set_title(\"Palmer Penguins\")\n            histplot.set_xlabel(\"Body Mass (g)\")  # Set x-axis label\n            histplot.set_ylabel(\"Count\")  # Set y-axis label\n            return histplot\n\n    with ui.card(full_screen=True):\n        ui.h3(\"Penguin Population by Island\")\n\n        @render_plotly()\n        def island_population_chart():\n            filtered = filtered_data()\n            island_counts = filtered[\"island\"].value_counts().reset_index()\n            island_counts.columns = [\"island\", \"count\"]\n            return px.bar(\n                island_counts,\n                x=\"island\",\n                y=\"count\",\n                title=\"Penguin Population by Island\",\n                labels={\"count\": \"Number of Penguins\"},\n                color=\"island\",\n                color_discrete_map=color_map,\n            )\n\n    # Creates a Plotly Boxplot showing all species and islands\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Boxplot: Species\")\n\n        @render_plotly\n        def plotly_boxplot():\n            return px.box(\n                filtered_data(),\n                x=\"species\",\n                y=input.selected_attribute(),\n                color=\"island\",  # Add a color parameter to differentiate boxplots by island\n                title=\"Penguins Boxplot\",\n                labels={\n                    \"species\": \"Species\",\n                    input.selected_attribute(): input.selected_attribute()\n                    .replace(\"_\", \" \")\n                    .title(),\n                },\n            )\n\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n\n@reactive.calc\ndef filtered_data():\n    return penguins_df[\n        (penguins_df[\"species\"].isin(input.selected_species_list()))\n        & (penguins_df[\"island\"].isin(input.selected_islands()))\n    ]\n", "type": "text"}]